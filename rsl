#!/bin/bash
#Record sleep from camera, post process audio with silence removal and filter on specific audio dB levels

if [ -z "$1" ]; then
  echo "Usage: rsl ipadr {time} {playstream} "
  exit 1 
fi

ipadr=$1
ping -c 1 "$ipadr" || exit $?

time=$2
stream=$3

if [ -z "$2" ]; then
  time=09:00:00
fi

if [ -z "$3" ]; then
  stream=1
fi

# Only necessary for raw video files -> probably not applicable for rtsp stream from D-link cam DCS-936L
#if [ -z "$4" ]; then
#  IFPS=10
#fi

# shellcheck disable=2034
read -r viddir serial camname <  <(sdir "$ipadr")
cd "$viddir" || { echo "Failed to cd into $viddir"; if [ ! -d "$viddir" ]; then mkdir -v  "$viddir"; cd "$viddir" || { echo "Failed to cd into $viddir, using $PWD"; viddir=$PWD; } fi }

today=$(date +"20%y%m%d")

vfile=$viddir/$today-sleep.mp4
afile=$viddir/$today-sleep.mp3

avstat=$(avstat "$ipadr")

readarray rtsp_url < <(echo "$avstat" | grep url | cut -d'>' -f2 | cut -'d<' -f1)
rtsp_stream=${rtsp_url[$stream - 1]}
    
case $serial in
  DCS-936L)
     dlink_rtsp=rtsp://$ipadr/$rtsp_stream
     # http://192.168.0.110:80/av2/mjpg.cgi?profileid=3 - workaround for stream 3 DCS-936L firmware v1.5/works in firmware 1.2

     ;;
  *)
     dlink_rtsp=rtsp://$ipadr/$rtsp_stream
     ;;
esac

readarray fps < <(echo "$avstat" | grep fps | cut -d'>' -f2 | cut -'d<' -f1)
ofps=${fps[$stream - 1 ]}


# calibrated with 100% mic gain in d-link web configuration and audacity spectogram
audiolevels="-45dB -35dB -25dB"
# Filter high freq noise
lowpass_freq=1000

for audiolevel in $audiolevels; do 
  audiofilter+=" -af lowpass=f=$lowpass_freq,silenceremove=0:0:0:-1:1:$audiolevel $viddir/${today}_sleep$audiolevel.mp3"
done;

#mv -v -f "$vfile" "$viddir"/$today-sleep-backup.mp4
#mv -v -f "$afile" "$viddir"/$today-sleep-backup.mp3

if [ -z "$ofps" ]; then
  # Let ffmpeg determine framerates
  # Want word-splitting so that $audiofilter is represented as several arguments http://tldp.org/LDP/abs/html/quotingvar.html
  # shellcheck disable=2086
  ffmpeg -y -t $time -i $dlink_rtsp "$vfile" "$afile" $audiofilter
#  FFREPORT=file=ffmpeg-sleep.log ffmpeg -y -loglevel verbose -t $time -i $rtsp $vfile $afile $audiofilter
else
  #Force specific output framerate
  # shellcheck disable=2086
  ffmpeg -y -t $time -i $dlink_rtsp -r $ofps "$vfile" "$afile" $audiofilter
fi

echo "FFMPEG/RSL script exit statsus " $?
