#!/bin/bash

#ip=$(grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" <<< "$@" | head -1)
[[ $@ =~ ([0-9]{1,3}\.){3}[0-9]{1,3} ]] && { ip=${BASH_REMATCH[0]}; set -- ${@#$ip}; }

[[ -z "$ip" ]] && { echo -e "No ip address\nUsage: $(basename "$0") [-d] [-l] ip {dir ...}"; printf "\t-l long format\n\t-d only list directories and files\n"; exit 1; }

[[ $@ =~ -l ]] && { longformatopt=${BASH_REMATCH[0]}; set -- ${@#$longformatopt}; }
[[ $@ =~ -d ]] && { listdir=${BASH_REMATCH[0]}; set -- ${@#$listdir}; }

#longformatopt=$(grep -oE "\-l" <<< "$@")

dir=$1

[[ -z "$dir" ]] && set /

server=$(getserver "$ip")

function print_dir
{
  #format: var g_folderslistStr = GV("Picture;1;0;null;0;0;0;1514898228;0,Video;1;0;null;5;0;0;1515193747;0","")
  #format: var g_filelistStr = decodeURIComponent(GV("p1_20180104_090009.jpg;0;0;56;0;0;0;1515052811;0,
     
  readarray -d ',' list <<< "$1"

  for item in ${list[*]}; do
    IFS=";" read -r -d, -a dprop <<< "$item" 
    
    timestamp=$(date --date @"${dprop[7]}" +'%b %e %T')

    if [[ "${dprop[1]}" == "1" ]]; then
        attr="drwxrwxr--"
      else
        attr="-r--r--r--"
        pagefiles+="http://$ip/cgi-bin/sddownload.cgi?file=$dir/${dprop[0]} "
        #Format: http://192.168.0.106/cgi-bin/sddownload.cgi?file=/video/20180103/00/p120180103_003150.mp4
    fi

    if [[ ! -z "$longformatopt" ]]; then
      [[ $listdir ]] && printf "%s %s admin admin %s %s\n" "$attr" "$(numfmt --to=iec "$(( dprop[3] * 1000 ))" --padding=7)" "$timestamp" "${dprop[0]}"
    else
      [[ $listdir ]] && echo "${dprop[0]}"
    fi

  done
 
}

function parse_page()
{
  totalpages=1
  currentpage=0

  pagefiles=

  until (( currentpage >= totalpages )); do
  
    ((currentpage++))
  
    if [[ $(dreq "http://$ip/cgi-bin/sdoperate.cgi?list=&path=$dir&page=$currentpage") == *"500 Internal Error"* ]]; then
      # Trying to access non-existent directory gives "500 Internal Error" response
  
        echo "Failed to open '$dir': 500 Internal Error"
        continue
    fi
  
    # file/dir-names for each page are embedded in variables inside Javascript <script>-tag

    # Use FD 10 for read for not interfering with read from stdin inside {}
    while read -r -u 10 line ; do

      [[ "$line" =~ ^var\ g_totalpage ]] &&       { IFS='"' read -r f1 totalpages f3 <<< "$line"; continue;  }
      [[ "$line" =~ ^var\ g_folderslistStr ]] &&  { IFS='"' read -r f1 folderslistStr f3 <<< "$line"; continue; }
      [[ "$line" =~ ^var\ g_filelistStr ]] &&     { IFS='"' read -r f1 filelistStr f3  <<< "$line"; break; }

    done 10< <(dreq "http://$ip/setup_sdlist.htm")

    print_dir "$folderslistStr"
    print_dir "$filelistStr"

    dirfiles+=$pagefiles 
  done
}

case $server in
   
   Embedthis-Appweb*)
      
      #set 100 files pr page (100:sdfpp=3,50:sdfpp=2,20:sdfpp=1,10:sdfpp=0)
      sdfpp=3

      dreq "http://$ip/cgi-bin/sdoperate.cgi?sdfpp=$sdfpp&del=" >/dev/null
      
      while (( "$#" )); do
        
        dirfiles=

        dir=$1
         
        if [[ $(basename "$dir") == *"."* ]]; then
          dirfiles="http://$ip/cgi-bin/sddownload.cgi?file=$dir" # single file with . extension
        else
          parse_page
        fi

        [[ ! -z $dirfiles && ! $listdir ]] && dreq -v --remote-header-name --remote-name-all $dirfiles

        shift;

    done

    ;;
    
    dcs-lig-httpd*)

    #dreq "http://$ip/eng/admin/adv_sdcard.cgi"  --data 'command=video&filesperpage=100&totalpage=&currentpage=1&folderpath=&hostname=&resultCode=&FolderName=&files_per_page=100&page_count=1'
    
      #curl 'http://192.168.0.110/eng/admin/adv_sdcard.cgi?folderpath=&command=video&filesperpage=100' ' --compressed
      #format : <folderstring>18:d:-1*17:d:-1*15:d:-1*14:d:-1*13:d:-1*12:d:-1*</folderstring>
      #format: <folderstring>20180105_185040.jpg:f:123*</folderstring>
      #curl 'http://192.168.0.110/eng/admin/adv_sdcard.cgi'  --data 'command=video&filesperpage=100&totalpage=&currentpage=1&folderpath=&hostname=&resultCode=&FolderName=&files_per_page=100&page_count=1' --compressed
      #getSDFile-dcs-lig-httpd
      ;;
esac

